// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview An AI coach for various topics.
 *
 * - aiCoach - A function that provides coaching on a given topic.
 * - AiCoachInput - The input type for the aiCoach function.
 * - AiCoachOutput - The return type for the aiCoach function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import { AiCoachMessageSchema } from '@/ai/schemas/ai-coach-schema';

const AiCoachInputSchema = z.object({
  topic: z
    .string()
    .describe('The topic for the coaching session. e.g., "public speaking", "confidence"'),
  history: z.array(AiCoachMessageSchema).describe('The conversation history.'),
});
export type AiCoachInput = z.infer<typeof AiCoachInputSchema>;

const AiCoachOutputSchema = z.object({
  response: z.string().describe("The AI coach's response."),
});
export type AiCoachOutput = z.infer<typeof AiCoachOutputSchema>;

export async function aiCoach(
  input: AiCoachInput
): Promise<AiCoachOutput> {
  return aiCoachFlow(input);
}

const prompt = ai.definePrompt({
  name: 'aiCoachPrompt',
  input: {schema: AiCoachInputSchema},
  output: {schema: AiCoachOutputSchema},
  prompt: `You are an AI-powered coach for {{{topic}}}. Your goal is to provide supportive, insightful, and actionable advice. Engage in a natural, conversational manner.

Here is the conversation history:
{{#each history}}
{{#if isUser}}
User: {{{content}}}
{{else}}
AI: {{{content}}}
{{/if}}
{{/each}}

Based on the history, provide the next response as the AI coach.`,
});

const aiCoachFlow = ai.defineFlow(
  {
    name: 'aiCoachFlow',
    inputSchema: AiCoachInputSchema,
    outputSchema: AiCoachOutputSchema,
  },
  async input => {
    const historyWithUserFlag = input.history.map(message => ({
      ...message,
      isUser: message.role === 'user',
    }));
    const {output} = await prompt({...input, history: historyWithUserFlag});
    return output!;
  }
);