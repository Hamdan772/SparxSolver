// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A conversation starter generator AI agent.
 *
 * - generateConversationStarters - A function that handles the conversation starter generation process.
 * - GenerateConversationStartersInput - The input type for the generateConversationStarters function.
 * - GenerateConversationStartersOutput - The return type for the generateConversationStarters function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateConversationStartersInputSchema = z.object({
  situation: z.string().describe('The social situation to generate conversation starters for. examples: a party, a conference, a networking event, a first date.'),
  interests: z.string().describe('The interests of the people involved in the conversation. examples: technology, sports, politics, movies, music.'),
});
export type GenerateConversationStartersInput = z.infer<typeof GenerateConversationStartersInputSchema>;

const GenerateConversationStartersOutputSchema = z.object({
  conversationStarters: z.array(z.string()).describe('A list of engaging and relevant conversation starters for the given social situation and interests.'),
});
export type GenerateConversationStartersOutput = z.infer<typeof GenerateConversationStartersOutputSchema>;

export async function generateConversationStarters(input: GenerateConversationStartersInput): Promise<GenerateConversationStartersOutput> {
  return generateConversationStartersFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateConversationStartersPrompt',
  input: {schema: GenerateConversationStartersInputSchema},
  output: {schema: GenerateConversationStartersOutputSchema},
  prompt: `You are an AI-powered conversation starter generator. You will generate a list of engaging and relevant conversation starters for the given social situation and interests.

Situation: {{{situation}}}
Interests: {{{interests}}}

Conversation Starters:`,
});

const generateConversationStartersFlow = ai.defineFlow(
  {
    name: 'generateConversationStartersFlow',
    inputSchema: GenerateConversationStartersInputSchema,
    outputSchema: GenerateConversationStartersOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
