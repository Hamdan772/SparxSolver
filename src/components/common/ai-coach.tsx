// This is an autogenerated file from Firebase Studio.
'use client';

import { aiCoach } from '@/ai/flows/ai-coach';
import { AiCoachMessageSchema } from '@/ai/schemas/ai-coach-schema';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { useGoals } from '@/context/goals-context';
import { useProgress, ActivityType } from '@/context/progress-context';
import { Loader2, Send, Sparkles, User } from 'lucide-react';
import { useEffect, useRef, useState, type FormEvent } from 'react';
import type { z } from 'zod';

type Message = z.infer<typeof AiCoachMessageSchema>;

type AiCoachProps = {
  topic: string;
  initialMessage: string;
};

const GOAL_THRESHOLDS: Record<string, { goalId: string; count: number }> = {
    'public speaking': { goalId: 'podium-pro', count: 5 },
    'confidence building': { goalId: 'confidence-builder', count: 5 },
    'friendship advice': { goalId: 'friendship-circle', count: 5 },
};

export default function AiCoach({ topic, initialMessage }: AiCoachProps) {
  const [messages, setMessages] = useState<Message[]>([
    { role: 'model', content: initialMessage },
  ]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const { achieveGoal } = useGoals();
  const { logActivity } = useProgress();

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleMessageSubmit = async (e: FormEvent) => {
    e.preventDefault();
    if (!input.trim() || isLoading) return;

    setIsLoading(true);
    setError(null);

    const newMessages: Message[] = [...messages, { role: 'user', content: input }];
    setMessages(newMessages);
    setInput('');

    try {
      const result = await aiCoach({
        topic: topic,
        history: newMessages,
      });
      setMessages([
        ...newMessages,
        { role: 'model', content: result.response },
      ]);
      
      logActivity(topic as ActivityType);

      const sessionKey = `coach-interactions-${topic}`;
      const currentCount = parseInt(sessionStorage.getItem(sessionKey) || '0') + 1;
      sessionStorage.setItem(sessionKey, currentCount.toString());

      const goalInfo = GOAL_THRESHOLDS[topic];
      if (goalInfo && currentCount >= goalInfo.count) {
          achieveGoal(goalInfo.goalId);
      }

    } catch (err) {
      console.error(err);
      setError(
        'There was an issue with the AI Coach. Please try again later.'
      );
      // Revert user message on error
      setMessages(messages);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Card className="flex flex-col h-[80vh] w-full">
      <CardContent className="flex-1 overflow-y-auto p-6 space-y-4">
        {messages.map((message, index) => (
          <div
            key={index}
            className={`flex items-start gap-3 ${
              message.role === 'user' ? 'justify-end' : ''
            }`}
          >
            {message.role === 'model' && (
              <div className="p-2 bg-primary rounded-full text-primary-foreground">
                <Sparkles className="w-5 h-5" />
              </div>
            )}
            <div
              className={`rounded-lg px-4 py-3 max-w-[80%] ${
                message.role === 'user'
                  ? 'bg-primary text-primary-foreground'
                  : 'bg-muted text-muted-foreground'
              }`}
            >
              <p className="text-sm">{message.content}</p>
            </div>
            {message.role === 'user' && (
              <div className="p-2 bg-muted rounded-full text-muted-foreground">
                <User className="w-5 h-5" />
              </div>
            )}
          </div>
        ))}
         {isLoading && (
          <div className="flex items-start gap-3">
             <div className="p-2 bg-primary rounded-full text-primary-foreground">
                <Sparkles className="w-5 h-5" />
              </div>
            <div className="rounded-lg px-4 py-3 max-w-[80%] bg-muted text-muted-foreground">
                <div className="flex items-center gap-2">
                    <Loader2 className="w-4 h-4 animate-spin" />
                    <span>Thinking...</span>
                </div>
            </div>
          </div>
        )}
        {error && (
            <div className="rounded-lg px-4 py-3 bg-destructive text-destructive-foreground">
                <p className="text-sm">{error}</p>
            </div>
        )}
        <div ref={messagesEndRef} />
      </CardContent>
      <div className="border-t p-4">
        <form onSubmit={handleMessageSubmit} className="flex gap-2">
          <Input
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder={`Ask for ${topic} advice...`}
            className="flex-1"
            disabled={isLoading}
          />
          <Button type="submit" disabled={isLoading || !input.trim()}>
            {isLoading ? (
              <Loader2 className="w-4 h-4 animate-spin" />
            ) : (
              <Send className="w-4 h-4" />
            )}
            <span className="sr-only">Send</span>
          </Button>
        </form>
      </div>
    </Card>
  );
}
